---
title: "Northern gannets Rouzic 2022"
author: "Aurore Ponchon"
format: html
editor: visual
---

## 1- Importing data from Movebank

The dataset is stored on the online database Movebank. It can be downloaded directly from the web as long as the user has an account. Each time the dataset is downloaded, the last locations are added, as some of the devices are still emitting.

```{r}
#| echo: false
#| include: true
#| warning: false
#| message: false
library(move)
library(here)
library(tidyverse)
library(ggplot2)
library(viridis)
library(sf)
library(rgdal)
library(fields)

source(here("R","Functions.R"))

# loginStored <- movebankLogin(username="AurorePonchon", password="XXX")
# gannets<-searchMovebankStudies(x="gannet", login=loginStored)[1]
# metadata<-getMovebankStudy(study=gannets,login=loginStored)
# getMovebankSensorsAttributes(study=gannets,login=loginStored)
# reftable<-getMovebankReferenceTable(study=gannets,login=loginStored)
# locations <- getMovebankData(study=gannets, login=loginStored,
#                              removeDuplicatedTimestamps=TRUE)
# save(locations,file=here("data","raw","gannets_rouzic_raw_2022.Rdata"))
# 
# leroySPDF <- as(locations,"SpatialPointsDataFrame")
# writeOGR(leroySPDF, dsn=here("data","NewlyCreatedData","shapefiles"), layer="all_raw_gannets", driver="ESRI Shapefile", overwrite_layer =T)

load(here("data","raw","gannets_rouzic_raw_2022.Rdata"))
```

## 2- Processing location data

Movebank datasets contain a lot of information that are not all necessary for the analysis. Then, we calculate distances and time between locations and add a few variables to summarize time spent on land and at-sea. We illustrate the raw data by some descriptive plots

```{r}
#| echo: false
#| include: true

colo_coord<-data.frame(long=-3.436752, lat=48.899868)

locs<- locations@data %>% 
    select(tag_local_identifier,timestamp,location_long,location_lat,
           barometric_height, ground_speed,heading) %>% 
    rename(id=tag_local_identifier,
           datetime=timestamp,
           long=location_long,
           lat=location_lat,
           alt=barometric_height,
           speed=ground_speed)  %>% 
    arrange(id,datetime) %>% 
    mutate(id=as.factor(id))


ids<-unique(levels(locs$id))

#create new object with distance and time differences
locs.dist<-NULL

#loop through each individual 
for (i in 1:length(ids)){
    ind.loc<-locs %>% 
        filter(id==ids[i]) %>% 
        mutate(distmax=0,
               distadj=0,
               totalpath=0,
               difftimemin=0,
               travelNb=0,
               onlandNb=0)
  
    print(c("Processing individual ", i))
      
  #loop through each line to calculate distance and time difference with previous location
for (l in 2:nrow(ind.loc)){
    
ind.loc[l,"distadj"]<-rdist.earth(ind.loc[l,c("long","lat")],
                                   ind.loc[l-1,c("long","lat")], miles = F)
ind.loc[l,"difftimemin"]<-difftime(ind.loc[l,"datetime"],
                                   ind.loc[l-1,"datetime"], units="mins")
ind.loc[l,"distmax"]<-rdist.earth(ind.loc[l,c("long","lat")],
                                   colo_coord[c(1,2)], miles = F)
}

    #distance threshold set to 1km away from the colony
dist.threshold<-1    
     
ind.loc<-define_trips(data=ind.loc,dist.min=dist.threshold)
locs.dist<-rbind(locs.dist,ind.loc)    
}

#summarize all trips and periods on land by individuals
raw_trips<-raw_trips_summary_ind(locs.dist)
raw_land<-raw_land_summary_ind(locs.dist)

remove(locations,ind.loc,locs)

##Parameters to define a trip 
last.dist<-10       #distance threshold (in km) when having only one location between 2 trips
row.thres<- 4               #number of rows constituting a trip
dur.thres<-0.4         #min duration of a trip


#select trips and periods on land
```

## 3- Visualisation of individual trips

```{r}

colo<-tim.colors(length(ids))
#for (i in 1:length(ids)){
temp<-locs.dist %>% 
    filter(id==ids[i] & lat > 47) 

raw_map<-ggplot(temp, aes(x=long,y=lat)) +
    geom_point(color=ifelse(temp$difftimemin >120, "black",colo[i]),
               shape=ifelse(temp$difftimemin >120, 17,16) ) 
    
print(raw_map)    

time.dist<-ggplot(temp,aes(x=datetime,y=distmax)) %>% 
    geom_point(color=colo[i])




```

## 4- Interpolation of at-sea locations

In order to determine an appropriate time interval, we investigate time difference between at-sea locations to identify potential gaps in the data and see when they occur. We also investigate the duration of at-sea trips.

```{r}
#| echo: false
#| include: true


```

After examination, 96% of data have a time interval of less than 15min so interpolation can be based on this time threshold.

```{r}
#| echo: false
#| include: true



```
