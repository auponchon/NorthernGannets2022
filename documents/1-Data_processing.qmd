---
title: "Northern gannets Rouzic 2022"
author: "Aurore Ponchon"
format: docx
editor: visual
---

## 1- Importing data from Movebank

The dataset is stored on the online database Movebank. It can be downloaded directly from the web as long as the user has an account. Each time the dataset is downloaded, the last locations are added, as some of the devices are still emitting.

```{r}
#| echo: false
#| include: true
#| warning: false
#| message: false
library(move)
library(here)
library(forcats)
library(tidyverse)
library(readxl)
library(ggplot2)
library(viridis)
library(gridExtra)
library(sf)
library(fields)
library(kableExtra)
library(conflicted)
library(adehabitatLT)


source(here("R","trip_functions.R"))

#WGS84 projection
projcrs <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"

#Coordinates of Rouzix colony
colo_coord_rouzic<-data.frame(long=-3.436752, lat=48.899868)


  loginStored <- movebankLogin(username="AurorePonchon", password="AlbaNoir0*")
  gannets<-searchMovebankStudies(x="gannet", login=loginStored)[1]
# metadata<-getMovebankStudy(study=gannets,login=loginStored)
# getMovebankSensorsAttributes(study=gannets,login=loginStored)
# reftable<-getMovebankReferenceTable(study=gannets,login=loginStored)
  move.rouzic <- getMovebankData(study=gannets, login=loginStored,
                               removeDuplicatedTimestamps=TRUE)
  save(move.rouzic,file=here("data","raw","gannets_rouzic_raw_2022.Rdata"))
 
 leroySPDF <- as(move.rouzic,"SpatialPointsDataFrame")
 writeOGR(leroySPDF, dsn=here("data","NewlyCreatedData","shapefiles"), layer="all_raw_gannets", driver="ESRI Shapefile", overwrite_layer =T)

```

## 2- Processing location data

Movebank datasets contain a lot of information that are not all necessary for the analysis so data were filtered. Some data from other files were added, such as individual serology. Then, I calculated distances and time between locations and added a few variables to summarize time spent on land and at-sea. We illustrate the raw data locations by some descriptive plots.

```{r}
#| echo: false
#| include: true
#| warning: false
#| message: false

load(here("data","raw","gannets_rouzic_raw_2022.Rdata"))

#import of external individual data for serology
serol.rouzic<-read_excel(here("data","raw","Données Fous Rouzik 1O2022.xlsx"),
              sheet="Equipement GPS",
              n_max =16) %>% 
      dplyr::select(Balise,Résultats_test_Grippe_Aviaire) %>% 
       rename(id=Balise, sero=Résultats_test_Grippe_Aviaire) %>% 
       mutate(id=as.factor(id),
              sero=as.factor(sero)) %>% 
        mutate(sero = recode(sero,"Negatif"  = "Negative" , 
                                   "Positif" = "Positive"  ,
                                   "Inhibé" =  "Unknown" ,
                                   "Negatif au 1/10" = "LateNegative" ))
       
#select location data
locs.rouzic<- move.rouzic@data %>% 
    dplyr::select(tag_local_identifier,timestamp,location_long,location_lat,
           barometric_height, ground_speed) %>% 
    rename(id=tag_local_identifier,
           datetime=timestamp,
           long=location_long,
           lat=location_lat,
           alt=barometric_height,
           speed=ground_speed)  %>% 
    arrange(id,datetime) %>% 
    mutate(id=as.factor(id),site=as.factor("Rouzic")) %>% 
    left_join(serol.rouzic,by="id",keep=F) %>% 
    mutate(id=fct_drop(id))
    


ids<-unique(levels(locs.rouzic$id))
colo.ind<-tim.colors(length(ids))

#create new object with distance and time differences
rawLoc.rouzic<-NULL
#distance threshold set to 1km away from the colony to determine a trip
dist.threshold<-1    

#loop through each individual 
for (i in 1:length(ids)){
    ind.loc<-locs.rouzic %>% 
        dplyr::filter(id==ids[i]) %>% 
        mutate(distmax=0,
               distadj=0,
               totalpath=0,
               difftimemin=0,
               travelNb=0,
               onlandNb=0)
  
  #  print(c("Processing individual ", i))
      
  #loop through each line to calculate distance and time difference with previous location
for (l in 2:nrow(ind.loc)){
    
ind.loc[l,"distadj"]<-rdist.earth(ind.loc[l,c("long","lat")],
                                   ind.loc[l-1,c("long","lat")], miles = F)
ind.loc[l,"difftimemin"]<-difftime(ind.loc[l,"datetime"],
                                   ind.loc[l-1,"datetime"], units="mins")
ind.loc[l,"distmax"]<-rdist.earth(ind.loc[l,c("long","lat")],
                                   colo_coord_rouzic[c(1,2)], miles = F)
}

#define periods on land and at sea   
ind.loc<-define_trips(data=ind.loc,dist.min=dist.threshold)
rawLoc.rouzic<-rbind(rawLoc.rouzic,ind.loc)    
}

rawLoc.rouzic$trip.id<-paste(rawLoc.rouzic$id,rawLoc.rouzic$travelNb,sep=".")
save(rawLoc.rouzic,file=here("data","NewlyCreatedData","rawLocRouzic.Rdata"))


load(here("data","NewlyCreatedData","rawLocRouzic.Rdata"))

#Plot locations
# distloc<-ggplot(rawLoc.rouzic,aes(x=datetime,y=distmax),group=id)+
#     geom_point(aes(color=id),show.legend=F) +
#      geom_line(aes(color=id),show.legend=F,size=0.8) +
# #    scale_y_continuous(limits=c(0,400)) +
#     scale_color_manual(values=colo.ind)+
#     labs(x="Date",y="Maximal distance to colony (km)")
# 
# diffloc<-ggplot(rawLoc.rouzic,aes(x=datetime,y=difftimemin/60),group=id)+
#     geom_point(aes(color=id),show.legend=F) +
#     scale_color_manual(values=colo.ind)+
#     labs(x="Date",y="Time gaps (h)")
# 
# grid.arrange(distloc,diffloc,ncol=2)

#summarize all trips and periods on land by individuals
raw_trips1<-trips_summary_ind(rawLoc.rouzic)
raw_land1<-land_summary_ind(rawLoc.rouzic)

write.csv(raw_trips1,file=here("data","NewlyCreatedData","raw_trips_summary1.csv"),
          row.names = F,quote=F)
write.csv(raw_land1,file=here("data","NewlyCreatedData","raw_land_summary1.csv"),
          row.names = F,quote=F)

summy.trips<-raw_trips1 %>% 
    group_by(id) %>% 
    summarize(Nbtrip=n(),
              Mindurh=min(TripDurh),
              maxDiffh=max(maxDiffTimeh),
              minLocs=min(nlocs))

# kbl(summy.trips,caption="Summary of raw trips") %>%
#   kable_styling(bootstrap_options = c("striped", "hover"))


summy.land<-raw_land1 %>% 
    group_by(id) %>% 
    summarize(Nbland=n(),
              Mindurh=min(LandDurh),
              maxDiffh=max(maxDiffTimeh),
              minLocs=min(nlocs))

# kbl(summy.land,caption="Summary of periods on land") %>%
#   kable_styling(bootstrap_options = c("striped", "hover"))


##plot trip and land periods
dist<-ggplot(raw_trips1,aes(x=DateEnd,y=Distmaxkm),group=id)+
    geom_point(aes(color=id),show.legend=F) +
    scale_y_continuous(limits=c(0,200)) +
    scale_color_manual(values=colo.ind)+
    labs(x="Date",y="Maximal distance to colony (km)")

dur<-ggplot(raw_trips1,aes(x=DateEnd,y=TripDurh ),group=id)+
    geom_point(aes(color=id)) +
    scale_y_continuous(limits=c(0,10)) +
    scale_color_manual(values=colo.ind)+
    labs(x="Date",y="Trip duration (h")
#grid.arrange(dist,dur,ncol=2)

correl<-ggplot(raw_trips1,aes(x=log(TripDurh),y=log(Distmaxkm)))+
    geom_point(aes(color=DateEnd)) +
    scale_colour_datetime(low=viridis(100)[1],high=viridis(100)[100]) +
    labs(x="log Trip duration (h)",y="log Maximal distance to colony (km)")
#print(correl)

land<-ggplot(raw_land1,aes(x=DateEnd,y=LandDurh ),group=id)+
    geom_point(aes(color=id)) +
  #  scale_y_continuous(limits=c(0,10)) +
    scale_color_manual(values=colo.ind)+
    labs(x="Date",y="Periods on land (h)")
print(land)


##Parameters to define clean trips and filter locations
row.thres<- 4               #number of rows constituting a trip
dur.thres<-1         #minimum duration of a trip (in h)

clean.trip.nb<-raw_trips1 %>%
     dplyr::filter(TripDurh > dur.thres & nlocs >= row.thres) 

cleanLocs.rouzic<-rawLoc.rouzic %>%
    dplyr::filter(rawLoc.rouzic$trip.id %in% clean.trip.nb$trip.id)

save(cleanLocs.rouzic,file=here("data","NewlyCreatedData","clean_locs_rouzic.Rdata"))

remove(move.rouzic,ind.loc,locs.rouzic,serol.rouzic,dist,dur,diffloc,distloc,correl)

 SPDF <- SpatialPointsDataFrame(coords = cleanLocs.rouzic[,c("long","lat")], 
                                data = cleanLocs.rouzic,
                               proj4string = CRS(projcrs))
 writeOGR(SPDF, dsn=here("data","NewlyCreatedData","shapefiles"), layer="clean_trips_raw_gannets", driver="ESRI Shapefile", overwrite_layer =T)

```

## 3- Interpolation

As data has irregular time intervals between consecutive locations, we linearly interpolated data to have one location every 15min., as 96% of data have a time interval of less than 15min. We then compared each raw trip with interpolations. It appears that for at least 5 individuals (222269, 222272, 222276, 222279,222280), interpolation badly recreates trips, as reconstituted trips cross Brittany without following the coastline. Illustrated maps are bounded at \> 47° N to have a better focus on the study area before migration.

```{r}
#| echo: false
#| include: true
#| warning: false
#| message: false


load(here("data","NewlyCreatedData","clean_locs_rouzic.Rdata"))
library(rnaturalearth)

##Interpolation
reso<-60*15 #(in seconds)



loc.clean.interp<-interpol(data=cleanLocs.rouzic,time.int=reso)
loc.clean.interp$sero<-cleanLocs.rouzic$sero[match(loc.clean.interp$id,
                                                   cleanLocs.rouzic$id)]
save(loc.clean.interp,file=here("Data","NewlyCreatedData","loc_clean_interp_rouzic.RData"))

##Ilustrate interpolations with raw data

longmn=-5
longmx=2
latmn=47
latmx=52

#crop polygon shapefile to the study area
world <- ne_countries(scale = 50, returnclass = 'sf')
colo_sf_rouzic<-st_as_sf(colo_coord_rouzic,                         
           coords = c("long", "lat"),
           crs = projcrs)

europe <- c("Belgium","Denmark","France",
                   "Germany","Ireland","Netherlands",
                   "Portugal","Spain","Sweden")
europe_map <- 
    world %>% 
    dplyr::filter(name %in% europe)

bbox_europe <- st_bbox(c(xmin= longmn , ymin=latmn ,xmax=longmx, ymax = latmx), 
                       crs = projcrs)
europe_crop <- st_crop(europe_map, bbox_europe)


for (a in 1:length(ids)){
    raw<-cleanLocs.rouzic %>% 
        dplyr::filter(id==ids[a] & lat > 47) %>% 
        st_as_sf(.,                         
           coords = c("long", "lat"),
           crs = projcrs)
   
     interp.ind<-loc.clean.interp %>% 
        dplyr::filter(id==ids[a]& lat > 47) %>% 
     st_as_sf(.,                         
           coords = c("long", "lat"),
           crs = projcrs)

##Ilustrate interpolations with raw data
longmin=floor(extent(interp.ind)[1])
longmax=ceiling(extent(interp.ind)[2])
latmin=floor(extent(interp.ind)[3])
latmax=ceiling(extent(interp.ind)[4]) 
     
     
mapa<-ggplot(data = europe_crop) +
    geom_sf(fill="grey") +
    coord_sf(xlim = c(longmin,longmax), ylim = c(latmin, latmax), expand = FALSE) +
     geom_sf(data = interp.ind, shape = 16, colour = colo.ind[a]) +
     geom_sf(data = raw, shape = 17, colour = "black") +
    geom_sf(data = colo_sf_rouzic, shape = 15, colour = "orange") +
    labs(title = paste ("Raw vs interpolated locations ID", ids[a],sep=" "))
 print(mapa)   
    
    
    
# plot(map$type,main=ids[a])
#     plot(interp.ind$long,interp.ind$lat,pch=16,col="red",cex=1.2)
#     points(raw$long,raw$lat,pch=16,col="black",cex=0.8)
#     points(colo_coord_rouzic$long,colo_coord_rouzic$lat,pch=17,col="blue",cex=1.5)
#    legend("topleft","(x,y)",legend=c("raw","interp"),pch=16,col=c("black","red"),
#           pt.cex=c(0.8,1.2))
}



```

## 4- Summary of clean trips

At-sea trips retained are at least \>1h long, \>1km from the colony and have more than 4 locations.

```{r}
#| echo: false
#| include: true
#| warning: false
#| message: false


load(here("Data","NewlyCreatedData","loc_clean_interp_rouzic.RData"))

clean_trips_interp<-trips_summary_ind(loc.clean.interp)

##plot trip and land periods
cleandist<-ggplot(clean_trips_interp,aes(x=DateEnd,y=Distmaxkm),group=id)+
    geom_point(aes(color=id),show.legend=F) +
    scale_y_continuous(limits=c(0,200)) +
    scale_color_manual(values=colo.ind)+
    labs(x="Date",y="Maximal distance to colony (km)")

cleandur<-ggplot(clean_trips_interp,aes(x=DateEnd,y=TripDurh ),group=id)+
    geom_point(aes(color=id)) +
    scale_y_continuous(limits=c(0,10)) +
    scale_color_manual(values=colo.ind)+
    labs(x="Date",y="Trip duration (h")
grid.arrange(cleandist,cleandur,ncol=2)

correl<-ggplot(clean_trips_interp,aes(x=log(TripDurh),y=log(Distmaxkm)))+
    geom_point(aes(color=DateEnd)) +
    scale_colour_datetime(low=viridis(100)[1],high=viridis(100)[100]) +
    labs(x="log Trip duration (h)",y="log Maximal distance to colony (km)")
print(correl)

```

## 5- Effect of time on trip charateristics (GLMM)

According to GLMM, no effect of day on maximal distance, weak effect on trip duration and no effect on the total distance travelled during a trip.

```{r}
#| echo: false
#| include: true
#| warning: false
#| message: false


load(here("Data","NewlyCreatedData","loc_clean_interp_rouzic.RData"))

library(lme4)
library(lattice)
library(lmerTest)
library(sjPlot)

trips.interp.nomigr<-clean_trips_interp %>% 
    dplyr::filter(Distmaxkm < 300) %>% 
    mutate(day=match(format(DateEnd,format="%F"), 
                     unique(format(DateEnd,format="%F"))))

#Analysis with maximal distance
ggplot(trips.interp.nomigr,aes(x=day,y=Distmaxkm,
                               colour=id))+
    geom_point()+
    geom_smooth(method="lm",alpha=0.2) + 
    ggtitle("Maximal distance to colony over time by individual")

glmm.dist<-lmerTest::lmer(log(Distmaxkm) ~ day + (1 | id),data=trips.interp.nomigr)
     
summary(glmm.dist)
 lattice::dotplot(ranef(glmm.dist))$id
 plot_model(glmm.dist,type="eff",terms="day")

 
 #Analysis with trip duration
ggplot(trips.interp.nomigr,aes(x=day,y=TripDurh,
                               colour=id))+
    geom_point()+
    geom_smooth(method="lm",alpha=0.2)+
   ggtitle("Trip duration over time by individual")

glmm.dur<-lmerTest::lmer(log(TripDurh) ~ day + (1 | id),data=trips.interp.nomigr)
 
summary(glmm.dur)
lattice::dotplot(ranef(glmm.dur))$id
 plot_model(glmm.dur,type="eff",terms="day")
 
 
#Analysis with total path
ggplot(trips.interp.nomigr,aes(x=day,y=TotalPathkm,
                               colour=id))+
    geom_point()+
    geom_smooth(method="lm",alpha=0.2) +
    ggtitle("Total trip distance over time by individual")


glmm.path<-lmerTest::lmer(log(TotalPathkm) ~ day + (1 | id),data=trips.interp.nomigr)
   summary(glmm.path)  
lattice::dotplot(ranef(glmm.path))$id
plot_model(glmm.path,type="eff",terms="day")
```

## 6- Effect of time on colony attendance (GLMM)

According to GLMM, no effect of day on duration of periods on land at the colony.

```{r}
#| echo: false
#| include: true
#| warning: false
#| message: false

lands<-raw_land1 %>% 
    dplyr::filter(LandDurh > 1) %>% 
    mutate(day=match(format(DateEnd,format="%F"), 
                     unique(format(DateEnd,format="%F"))))

#Analysis with maximal distance
ggplot(lands,aes(x=day,y=LandDurh,
                               colour=id))+
    geom_point()+
    geom_smooth(method="lm",alpha=0.2) + 
    ggtitle("Periods on land (h)")

glmm.durnest<-lmerTest::lmer(log(LandDurh) ~ day + (1 | id), data=lands)
summary(glmm.durnest,corr=F)    
plot_model(glmm.durnest,type="eff",terms="day")
lattice::dotplot(ranef(glmm.dur))$id
```
