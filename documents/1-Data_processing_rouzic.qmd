---
title: "Data processing Northern gannets Rouzic 2022"
author: "Aurore Ponchon"
format: html
editor: visual
---

## 1- Importing data from Movebank

The dataset is stored on the online database Movebank. It can be downloaded directly from the web as long as the user has an account and requests an access. The last locations include migration trip towards wintering grounds for 4 individuals.

```{r}
#| echo: false
#| include: true
#| warning: false
#| message: false
library(move)
library(here)
library(forcats)
library(tidyverse)
library(readxl)
library(grid)
library(gridExtra)
library(sf)
library(fields)
library(kableExtra)
library(conflicted)

source(here("R","trip_functions.R"))


#   loginStored <- movebankLogin(username="AurorePonchon", 
#                                password="***")
#   gannets<-searchMovebankStudies(x="gannet", 
#                                  login=loginStored)[1]
# metadata<-getMovebankStudy(study=gannets,
#                            login=loginStored)
# getMovebankSensorsAttributes(study=gannets,
#                              login=loginStored)
# reftable<-getMovebankReferenceTable(study=gannets,
#                                     login=loginStored)
#  move.rouzic <- getMovebankData(study=gannets, 
#                                 login=loginStored,
#                               removeDuplicatedTimestamps=TRUE)
#  save(move.rouzic,
#       file=here("data","raw","rouzic","gannets_rouzic_raw_2022.Rdata"))
# 
# leroySPDF <- as(move.rouzic,"SpatialPointsDataFrame")
# writeOGR(leroySPDF, 
#          dsn=here("data","NewlyCreatedData","shapefiles"), 
#          layer="all_raw_gannets_rouzic", 
#          driver="ESRI Shapefile", 
#          overwrite_layer =T)

```

## 2- Processing location data

Movebank datasets contain a lot of information that are not all necessary for the analysis so data are filtered and sorted. Some data from other files were added, such as individual serology (not used in the end).

Distances and time between locations and a few other variables are added to summarize time spent on land and at-sea. Raw data locations are visualized by some descriptive plots, especially to identify outliers in maximal distance and more importantly, time gaps.

```{r}
#| echo: false
#| include: true
#| warning: false
#| message: false

load(here("data","raw","rouzic","gannets_rouzic_raw_2022.Rdata"))

#import external individual data for serology
serol.rouzic<-read_excel(here("data","raw","rouzic","Données Fous Rouzik 1O2022.xlsx"),
              sheet="Equipement GPS",
              n_max =16) %>% 
      dplyr::select(Balise,Résultats_test_Grippe_Aviaire) %>% 
       rename(id=Balise, 
              sero=Résultats_test_Grippe_Aviaire) %>% 
       mutate(id=as.factor(id),
              sero=as.factor(sero)) %>% 
        mutate(sero = recode(sero,"Negatif"  = "Negative" , 
                                   "Positif" = "Positive"  ,
                                   "Inhibé" =  "Unknown" ,
                                   "Negatif au 1/10" = "LateNegative" ))
       
#select location data
locs.rouzic<- move.rouzic@data %>% 
    dplyr::select(tag_local_identifier,timestamp,location_long,location_lat,
           barometric_height, ground_speed) %>% 
    rename(id=tag_local_identifier,
           datetime=timestamp,
           long=location_long,
           lat=location_lat,
           alt=barometric_height,
           speed=ground_speed)  %>% 
    arrange(id,datetime) %>% 
    mutate(id=as.factor(id),
           site=as.factor("Rouzic")) %>% 
    left_join(serol.rouzic,by="id",keep=F) %>% 
    mutate(id=fct_drop(id))
    
ids<-unique(levels(locs.rouzic$id))
colo.ind<-tim.colors(length(ids))


#create new object with distance and time differences
rawLoc.rouzic<-NULL

#loop through each individual 
for (i in 1:length(ids)){
    ind.loc<-locs.rouzic %>% 
        dplyr::filter(id==ids[i]) %>% 
        mutate(distmax=0,
               distadj=0,
               totalpath=0,
               difftimemin=0,
               travelNb=0,
               onlandNb=0)
  
  #  print(c("Processing individual ", i))
      
  #loop through each line to calculate distance and time difference with previous location
for (l in 2:nrow(ind.loc)){
    
ind.loc[l,"distadj"]<-rdist.earth(ind.loc[l,c("long","lat")],
                                   ind.loc[l-1,c("long","lat")], 
                                  miles = F)
ind.loc[l,"difftimemin"]<-difftime(ind.loc[l,"datetime"],
                                   ind.loc[l-1,"datetime"], 
                                   units="mins")
ind.loc[l,"distmax"]<-rdist.earth(ind.loc[l,c("long","lat")],
                                   colo_coord_rouzic[c(1,2)], 
                                  miles = F)
}

#define periods on land and at sea   
ind.loc<-define_trips(data=ind.loc,
                      dist.min=dist.threshold)
rawLoc.rouzic<-rbind(rawLoc.rouzic,ind.loc)    
}
rawLoc.rouzic$trip.id<-paste(rawLoc.rouzic$id,rawLoc.rouzic$travelNb,sep=".")
rawLoc.rouzic<-add_missing_return(rawLoc.rouzic,
                                  time.int=reso,colony=colo_coord_rouzic)

save(rawLoc.rouzic,file=here("data","NewlyCreatedData","rawLocRouzic.Rdata"))

load(here("data","NewlyCreatedData","rawLocRouzic.Rdata"))


distraw<-ggplot(rawLoc.rouzic,aes(x=datetime,y=distmax),group=id)+
    geom_point(aes(color=id),show.legend=F) +
  #  scale_y_continuous(limits=c(0,200)) +
    scale_color_manual(values=colo.ind)+
    labs(x="Date",y="Maximal distance to colony (km)")

diffraw<-ggplot(rawLoc.rouzic,aes(x=datetime,y=difftimemin),group=id)+
    geom_point(aes(color=id),show.legend=F) +
    scale_y_continuous(limits=c(0,5000)) +
    scale_color_manual(values=colo.ind)+
    labs(x="Date",y="Time gaps between 2 locations (in min)")

grid.arrange(distraw,diffraw, ncol=2,
              top = textGrob("Raw data",gp=gpar(fontsize=16,font=3)))



#summarize all trips and periods on land by individuals
raw_trips_rouzic<-trips_summary_ind(rawLoc.rouzic,colony=colo_coord_rouzic)
raw_land_rouzic<-land_summary_ind(rawLoc.rouzic,colony=colo_coord_rouzic)


summy.trips<-raw_trips_rouzic %>% 
    group_by(id) %>% 
    summarize(Nbtrip=n(),
              Mindurh=min(TripDurh),
              maxDiffh=max(maxDiffTimeh),
              minLocs=min(nlocs))

#details individual trips
# kbl(summy.trips,caption="Summary of raw trips") %>%
#   kable_styling(bootstrap_options = c("striped", "hover"))


summy.land<-raw_land_rouzic %>% 
    group_by(id) %>% 
    summarize(Nbland=n(),
              Mindurh=min(LandDurh),
              maxDiffh=max(maxDiffTimeh),
              minLocs=min(nlocs))

#details individual on land periods
# kbl(summy.land,caption="Summary of periods on land") %>%
#   kable_styling(bootstrap_options = c("striped", "hover"))


##plot trip and land periods
dist<-ggplot(raw_trips_rouzic,aes(x=DateEnd,y=Distmaxkm),group=id)+
    geom_point(aes(color=id),show.legend=F) +
    scale_y_continuous(limits=c(0,200)) +
    scale_color_manual(values=colo.ind)+
    labs(x="Date",y="Maximal distance to colony (km)")

dur<-ggplot(raw_trips_rouzic,aes(x=DateEnd,y=TripDurh ),group=id)+
    geom_point(aes(color=id)) +
    scale_y_continuous(limits=c(0,10)) +
    scale_color_manual(values=colo.ind)+
    labs(x="Date",y="Trip duration (h")

correl<-ggplot(raw_trips_rouzic,aes(x=log(TripDurh),y=log(Distmaxkm)))+
    geom_point(aes(color=DateEnd)) +
    scale_colour_datetime(low=viridis(100)[1],high=viridis(100)[100]) +
    labs(x="log Trip duration (h)",y="log Maximal distance to colony (km)")

land<-ggplot(raw_land_rouzic,aes(x=DateEnd,y=LandDurh ),group=id)+
    geom_point(aes(color=id)) +
  #  scale_y_continuous(limits=c(0,10)) +
    scale_color_manual(values=colo.ind)+
    labs(x="Date",y="Periods on land (h)")

grid.arrange(dist,dur,correl, land, ncol=2, nrow=2,
              top = textGrob("Raw trip features",gp=gpar(fontsize=16,font=3)))

#remove incomplete and short trips based on fixed thresholds
clean.trip.nb<-raw_trips_rouzic %>%
     dplyr::filter(TripDurh > dur.thres & 
                       nlocs >= row.thres) 

cleanLocs.rouzic<-rawLoc.rouzic %>%
    dplyr::filter(rawLoc.rouzic$trip.id %in% 
                      clean.trip.nb$trip.id)

cleanlands<-raw_land_rouzic %>% 
    dplyr::filter(LandDurh > 1 & id!="222278") 


save(cleanLocs.rouzic,
     file=here("data","NewlyCreatedData","clean_locs_rouzic.Rdata"))

remove(move.rouzic,ind.loc,locs.rouzic,serol.rouzic,dist,dur,diffloc,distloc,correl)

 SPDF <- SpatialPointsDataFrame(coords = cleanLocs.rouzic[,c("long","lat")], 
                                data = cleanLocs.rouzic,
                               proj4string = CRS(projcrs))
 writeOGR(SPDF, 
          dsn=here("data","NewlyCreatedData","shapefiles"), 
          layer="clean_trips_raw_gannets_rouzic", 
          driver="ESRI Shapefile", overwrite_layer =T)
```

## 3- Interpolation

As data has irregular time intervals between consecutive locations, data are linearly interpolated to have one location every 15min. (96% of data have a time interval \< 15min). Each raw trip is compared with interpolations. Illustrated maps are bounded at \> 47° N to have a better focus on the study area before migration. Note that migration trips are excluded after interpolation

```{r}
#| echo: false
#| include: true
#| warning: false
#| message: false


load(here("data","NewlyCreatedData","clean_locs_rouzic.Rdata"))
library(rnaturalearth)

##Interpolation
loc.clean.interp.rouzic<-interpol_pastecs(data=cleanLocs.rouzic,
                           time.int=reso,
                           colony=colo_coord_rouzic)

loc.clean.interp.rouzic$sero<-cleanLocs.rouzic$sero[
                                               match(loc.clean.interp.rouzic$id,
                                               cleanLocs.rouzic$id)]

#Identification of trips to exclude (incomplete trips and migration trip)
incomplete<-c("222267.1","222267.6","222275.1","222276.1",
              "222279.8","222279.32","222280.45")
migration<-c("222269.17","222270.32","222271.25","222272.24","222273.22","222274.25","222275.28","222276.17","222277.10","222278.1","222279.33","222280.46","222281.7")

loc.interp.rouzic <- loc.clean.interp.rouzic %>% 
    dplyr::filter(!trip.id %in% incomplete) %>% 
    dplyr::filter(!trip.id %in% migration)

save(loc.interp.rouzic,
     file=here("Data","NewlyCreatedData","loc_clean_interp_rouzic.RData"))

##Ilustrate interpolations with raw data
longmn<--6
longmx<-0
latmn<-47.5
latmx<-51

#crop polygon shapefile to the study area
world <- ne_countries(scale = 50, returnclass = 'sf')
colo_sf_rouzic<-st_as_sf(colo_coord_rouzic,
           coords = c("long", "lat"),
           crs = wgscrs)

europe <- c("Belgium","Denmark","France",
                   "Germany","Ireland","Netherlands",
                   "Portugal","Spain","Sweden")
europe_map <-
    world %>%
    dplyr::filter(name %in% europe)


for (a in 1:length(ids)){
    raw<-cleanLocs.rouzic %>%
        dplyr::filter(id==ids[a] & lat > 47) %>%
        st_as_sf(.,
           coords = c("long", "lat"),
           crs = wgscrs)

     interp.ind<-loc.interp.rouzic %>%
        dplyr::filter(id==ids[a]& lat > 47) %>%
     st_as_sf(.,
           coords = c("long", "lat"),
           crs = wgscrs)

##Ilustrate interpolations with raw data
longmin=floor(extent(interp.ind)[1])
longmax=ceiling(extent(interp.ind)[2])
latmin=floor(extent(interp.ind)[3])
latmax=ceiling(extent(interp.ind)[4])


mapa<-ggplot(data = europe_map) +
    geom_sf(fill="grey") +
     geom_sf(data = raw, shape = 17, colour = "black") +
      geom_sf(data = interp.ind, shape = 23, colour = colo.ind[a]) +
    geom_sf(data = colo_sf_rouzic, shape = 15, colour = "orange") +
     coord_sf(xlim = c(longmn,longmx), ylim = c(latmn, latmx), expand = FALSE) +
    labs(title = paste ("Raw vs interpolated locations ID", ids[a],sep=" "))
 print(mapa)

 #plot each trip individually (help identify trips to exclude)
# tp<-unique(raw$trip.id)  
#    
# for (b in 1:length(tp)) {
#     trp<-raw %>% 
#         dplyr::filter(trip.id ==tp[b] & travelNb!=0)
#     
#     intr<-interp.ind %>% 
#         dplyr::filter(trip.id==tp[b])
#     
#     xmmin<-min(c(extent(trp)[1],extent(intr)[1]))
#    xmmax<-max(c(extent(trp)[2],extent(intr)[2]))
#     ymmin<-min(c(extent(trp)[3],extent(intr)[3]))
#     ymmax<-max(c(extent(trp)[4],extent(intr)[4]))
#     
#    raw_lines <- trp %>% 
#        dplyr::group_by(trip.id) %>% # and year, month, etc as needed
#   dplyr::summarise(do_union = FALSE) %>%
#   sf::st_cast("MULTILINESTRING") 
#    
#      int_lines <-   intr %>% 
#          dplyr::group_by(trip.id) %>% # and year, month, etc as needed
#   dplyr::summarise(do_union = FALSE) %>%
#   sf::st_cast("MULTILINESTRING") 
#      
# jpeg(filename = here("outputs","clean_trips",paste("rouzic_",tp[b],"pastecs.jpg",sep="_")),
#      res=200,units="cm",width=15,height=15)
#    ma<-ggplot(data = europe_crop) +
#  #   geom_sf(fill="grey") +
#     coord_sf(xlim = c(xmmin,xmmax), ylim = c(ymmin,ymmax), expand = FALSE) +
#      geom_sf(data = intr, shape = 16, colour = colo.ind[a],size=1.2) +
#      geom_sf(data = trp, shape = 17, colour = "black",size=1.5) +
#     geom_sf(data = colo_sf_rouzic, shape = 15, colour = "orange") +
#      geom_sf(data=int_lines,colour=colo.ind[a]) +
#   #   geom_sf(data=raw_lines,colour="black") +
#     labs(title =  tp[b])
#  print(ma)
#  dev.off()
# }
 }# 


```

## 4- Summary of clean trips

At-sea trips retained are at least \>1h long, \>1km from the colony and have more than 4 locations. Migration bounds are excluded.

```{r}
#| echo: false
#| include: true
#| warning: false
#| message: false


load(here("Data","NewlyCreatedData","loc_clean_interp_rouzic.RData"))

clean_trips_interp_rouzic<-loc.interp.rouzic %>% 
                    trips_summary_ind(.,colony=colo_coord_rouzic)

lands<-raw_land_rouzic %>% 
    dplyr::filter(LandDurh > 1) %>% 
    mutate(day=match(format(DateEnd,format="%F"),
                      unique(format(DateEnd,format="%F"))))

##plot trip and land periods
cleandist<-ggplot(clean_trips_interp_rouzic,aes(x=DateEnd,y=Distmaxkm),group=id)+
    geom_point(aes(color=id),show.legend=F) +
 #   scale_y_continuous(limits=c(0,300)) +
    scale_color_manual(values=colo.ind)+
    labs(x="Date",y="Maximal distance to colony (km)")

cleandur<-ggplot(clean_trips_interp_rouzic,aes(x=DateEnd,y=TripDurh ),group=id)+
    geom_point(aes(color=id)) +
#    scale_y_continuous(limits=c(0,100)) +
    scale_color_manual(values=colo.ind)+
    labs(x="Date",y="Trip duration (h)")


correl<-ggplot(clean_trips_interp_rouzic,aes(x=log(TripDurh),y=log(Distmaxkm)))+
    geom_point(aes(color=DateEnd)) +
    scale_colour_datetime(low=viridis(100)[1],high=viridis(100)[100]) +
    labs(x="log Trip duration (h)",y="log Maximal distance to colony (km)")

land<-ggplot(cleanlands,aes(x=DateEnd,y=LandDurh ),group=id)+
    geom_point(aes(color=id)) +
  #  scale_y_continuous(limits=c(0,10)) +
    scale_color_manual(values=colo.ind)+
    
    labs(x="Date",y="Periods on land (h)")
grid.arrange(cleandist,cleandur,correl,land, ncol=2,nrow=2,
             top = textGrob("Clean data",gp=gpar(fontsize=16,font=3)))
```
