---
title: "Data processing \nNorthern gannets Bass Rock 2022"
author: "Aurore Ponchon"
format: html
editor: visual
---

## 1- Importing data

GPS data are stored as individual excel files. Note that 1 individual (18271) is an immature and is excluded from analysis.

Distances and time between locations and a few other variables are added to summarize time spent on land and at-sea. Raw data locations are visualized by some descriptive plots, especially to identify outliers in maximal distance and more importantly, time gaps.

```{r}
#| echo: false
#| include: true
#| warning: false
#| message: false
library(here)
library(forcats)
library(tidyverse)
library(ggplot2)
library(grid)
library(gridExtra)
library(sf)
library(rgdal)
library(kableExtra)
library(conflicted)

source(here("R","trip_functions.R"))

#import all files together
files<-list.files(here("data","raw","bass_rock"),
                  pattern=".pos",
                  full.names=T)
tags <- sub(".*Tag","",files)
tags <- data.frame(id=sub("_.*","",tags),
                   tag=as.character(1:length(files)))


bassrock_raw<-files %>% 
    map_dfr(read.table, 
            header=F, 
            sep="," , 
            skip = 5, 
            .id = "filepath" ) %>% 
    bind_rows() %>% 
    rename(tag=filepath,
           Day = V1,
           Month = V2,
           Year = V3,
           Hour = V4,
           Min = V5,
           Sec = V6,
           Sec_of_day = V7,
           Sats = V8,
           lat=V9,
           long=V10,
           alt = V11) %>% 
    left_join(tags, 
              by ="tag") %>% 
    mutate(datetime=as.POSIXct(strptime(paste(paste(Year,Month,Day,sep="-"),
                          paste(Hour,Min,Sec,sep=":"),
                          sep=" "),format="%y-%m-%d %H:%M:%S"),"GMT"),
           id=as.factor(id),
           speed=0,
           site=as.factor("Bass Rock"),
            sero=NA) %>% 
    dplyr::filter(lat!=0 & alt!=0 & 
                      datetime > start & 
                      id!="18271") %>% #this individual is an immature
    dplyr::select(id,datetime,long,lat,alt,speed,site,sero) %>% 
    arrange(id,datetime) %>% 
    distinct(id,datetime, .keep_all= TRUE) %>% 
    droplevels()

  save(bassrock_raw,
       file=here("data","raw","bass_rock","gannets_bassrock_raw_2022.Rdata"))
 
  
  SPDF <- SpatialPointsDataFrame(coords = bassrock_raw[,c("long","lat")], 
                                 data = bassrock_raw,
                               proj4string = CRS(projcrs))

 writeOGR(SPDF, 
          dsn=here("data","NewlyCreatedData","shapefiles"), 
          layer="all_raw_gannets_bassrock", 
          driver="ESRI Shapefile", 
          overwrite_layer =T)

 load(here("data","raw","bass_rock","gannets_bassrock_raw_2022.Rdata"))
 
 ids<-unique(levels(bassrock_raw$id))
colo.ind<-tim.colors(length(ids))


#create new object with distance and time differences
rawLoc.bassrock<-NULL

#loop through each individual 
for (i in 1:length(ids)){
    ind.loc<-bassrock_raw %>% 
        dplyr::filter(id==ids[i]) %>% 
        mutate(distmax=0,
               distadj=0,
               totalpath=0,
               difftimemin=0,
               travelNb=0,
               onlandNb=0)
  
  #  print(c("Processing individual ", i))
      
  #loop through each line to calculate distance and time difference with previous location
for (l in 2:nrow(ind.loc)){
    
ind.loc[l,"distadj"]<-rdist.earth(ind.loc[l,c("long","lat")],
                                   ind.loc[l-1,c("long","lat")], miles = F)
ind.loc[l,"difftimemin"]<-difftime(ind.loc[l,"datetime"],
                                   ind.loc[l-1,"datetime"], units="mins")
ind.loc[l,"distmax"]<-rdist.earth(ind.loc[l,c("long","lat")],
                                   colo_coord_bassrock[c(1,2)], miles = F)
}

#define periods on land and at sea   
ind.loc<-define_trips(data=ind.loc,dist.min=dist.threshold)
rawLoc.bassrock<-rbind(rawLoc.bassrock,ind.loc)    
}

rawLoc.bassrock$trip.id<-paste(rawLoc.bassrock$id,rawLoc.bassrock$travelNb,sep=".")
rawLoc.bassrock<-add_missing_return(rawLoc.bassrock,
                                    time.int=reso,
                                    colony=colo_coord_bassrock)

save(rawLoc.bassrock,
     file=here("data","NewlyCreatedData","rawLocBassrock.Rdata"))

distraw<-ggplot(rawLoc.bassrock,aes(x=datetime,y=distmax),group=id)+
    geom_point(aes(color=id),show.legend=F) +
  #  scale_y_continuous(limits=c(0,200)) +
    scale_color_manual(values=colo.ind)+
    labs(x="Date",y="Maximal distance to colony (km)")

diffraw<-ggplot(rawLoc.bassrock,aes(x=datetime,y=difftimemin),group=id)+
    geom_point(aes(color=id),show.legend=F) +
    scale_y_continuous(limits=c(0,5000)) +
    scale_color_manual(values=colo.ind)+
    labs(x="Date",y="Time gaps between 2 locations (in min)")

grid.arrange(distraw,diffraw, ncol=2,
             top = textGrob("Raw data",gp=gpar(fontsize=16,font=3)))


```

```{r}
#| echo: false
#| include: true
#| warning: false
#| message: false

load(here("data","NewlyCreatedData","rawLocBassrock.Rdata"))

#summarize all trips and periods on land by individuals
raw_trips_bassrock<-trips_summary_ind(rawLoc.bassrock,colony=colo_coord_bassrock)
raw_land_bassrock<-land_summary_ind(rawLoc.bassrock,colony=colo_coord_bassrock)


summy.trips<-raw_trips_bassrock %>% 
    group_by(id) %>% 
    summarize(Nbtrip=n(),
              Mindurh=min(TripDurh),
              maxDiffh=max(maxDiffTimeh),
              minLocs=min(nlocs))

#details individual trips
# kbl(summy.trips,caption="Summary of raw trips") %>%
#   kable_styling(bootstrap_options = c("striped", "hover"))


summy.land<-raw_land_bassrock %>% 
    group_by(id) %>% 
    summarize(Nbland=n(),
              Mindurh=min(LandDurh),
              maxDiffh=max(maxDiffTimeh),
              minLocs=min(nlocs))

#details individual on land periods
# kbl(summy.land,caption="Summary of periods on land") %>%
#   kable_styling(bootstrap_options = c("striped", "hover"))


##plot trip and land periods
dist<-ggplot(raw_trips_bassrock,aes(x=DateEnd,y=Distmaxkm),group=id)+
    geom_point(aes(color=id),show.legend=F) +
    scale_y_continuous(limits=c(0,500)) +
    scale_color_manual(values=colo.ind)+
    labs(x="Date",y="Maximal distance to colony (km)")

dur<-ggplot(raw_trips_bassrock,aes(x=DateEnd,y=TripDurh ),group=id)+
    geom_point(aes(color=id)) +
 #   scale_y_continuous(limits=c(0,10)) +
    scale_color_manual(values=colo.ind)+
    labs(x="Date",y="Trip duration (h)")

correl<-ggplot(raw_trips_bassrock,aes(x=log(TripDurh),y=log(Distmaxkm)))+
    geom_point(aes(color=DateEnd)) +
    scale_colour_datetime(low=viridis(100)[1],high=viridis(100)[100]) +
    labs(x="log Trip duration (h)",y="log Maximal distance to colony (km)")

land<-ggplot(raw_land_bassrock,aes(x=DateEnd,y=LandDurh ),group=id)+
    geom_point(aes(color=id)) +
  #  scale_y_continuous(limits=c(0,10)) +
    scale_color_manual(values=colo.ind)+
    labs(x="Date",y="Periods on land (h)")
grid.arrange(dist,dur,correl,land, ncol=2,nrow=2,
             top = textGrob("Raw trips",gp=gpar(fontsize=16,font=3)))

#remove incomplete and short trips based on fixed thresholds
clean.trip.nb<-raw_trips_bassrock %>%
     dplyr::filter(TripDurh > dur.thres & 
                       nlocs >= row.thres) 

cleanLocs.bassrock<-rawLoc.bassrock %>%
    dplyr::filter(rawLoc.bassrock$trip.id %in% 
                      clean.trip.nb$trip.id)

cleanlandsbass<-raw_land_bassrock %>% 
    dplyr::filter(LandDurh > 1) 


save(cleanLocs.bassrock,
     file=here("data","NewlyCreatedData","clean_locs_bassrock.Rdata"))

remove(move.bassrock,ind.loc,locs.bassrock,serol.bassrock,dist,dur,diffloc,distloc,correl)

 SPDF <- SpatialPointsDataFrame(coords = cleanLocs.bassrock[,c("long","lat")], 
                                data = cleanLocs.bassrock,
                               proj4string = CRS(projcrs))
 writeOGR(SPDF, 
          dsn=here("data","NewlyCreatedData","shapefiles"), 
          layer="clean_trips_raw_gannets_bassrock", 
          driver="ESRI Shapefile", 
          overwrite_layer =T)

```

## 2- Interpolation

As data has irregular time intervals between consecutive locations, data are linearly interpolated to have one location every 15min.Each raw trip is compared with interpolations. Note that migration trips are excluded after interpolation.

```{r}
#| echo: false
#| include: true
#| warning: false
#| message: false


load(here("data","NewlyCreatedData","rawLocBassrock.Rdata"))
library(rnaturalearth)

##Interpolation
loc.clean.interp.bassrock<-interpol_pastecs(data=cleanLocs.bassrock,
                           time.int=reso,
                           colony=colo_coord_bassrock)

#Identification of trips to exclude (incomplete trips and migration trip)
migration<-c("18204.25","18224.30","18225.38","18227.54","18264.35","18268.39","18271.35")
incomplete<-c("18201.1","18224.1","18203.20")

loc.interp.bassrock<-loc.clean.interp.bassrock %>% 
    dplyr::filter(!trip.id %in% migration) %>% 
    dplyr::filter(!trip.id %in% incomplete)

save(loc.interp.bassrock,
     file=here("Data","NewlyCreatedData","loc_clean_interp_bassrock.RData"))


##Ilustrate interpolations with raw data
longmn=-3
longmx=6
latmn=54
latmx=60

#crop polygon shapefile to the study area
world <- ne_countries(scale = 50, returnclass = 'sf')
colo_sf_bassrock<-st_as_sf(colo_coord_bassrock,
           coords = c("long", "lat"),
           crs = wgscrs)

europe <- c("Belgium","Denmark","France","United Kingdom",
                   "Germany","Ireland","Netherlands",
                   "Portugal","Spain","Sweden")
europe_map <-
    world %>%
    dplyr::filter(name %in% europe)


for (a in 1:length(ids)){
    raw<-cleanLocs.bassrock %>%
        dplyr::filter(id==ids[a] & lat > 47) %>%
        st_as_sf(.,
           coords = c("long", "lat"),
           crs = wgscrs)

         interp.ind<-loc.interp.bassrock %>%
        dplyr::filter(id==ids[a]& lat > 47) %>%
     st_as_sf(.,
           coords = c("long", "lat"),
           crs = wgscrs)

##Ilustrate interpolations with raw data
longmin=floor(st_bbox(interp.ind)[1])
longmax=ceiling(st_bbox(interp.ind)[3])
latmin=floor(st_bbox(interp.ind)[2])
latmax=ceiling(st_bbox(interp.ind)[4])


mapa<-ggplot(data = europe_map) +
    geom_sf(fill="grey") +
     geom_sf(data = interp.ind, shape = 23, colour = colo.ind[a]) +
     geom_sf(data = raw, shape = 17, colour = "black",size=0.8) +
    geom_sf(data = colo_sf_bassrock, shape = 15, colour = "orange") +
      coord_sf(xlim = c(longmn,longmx), ylim = c(latmn, latmx), expand = FALSE) +
    labs(title = paste ("Raw vs interpolated locations ID", ids[a],sep=" "))
 print(mapa)
   
 
 #plot each trip individually (help identify trips to exclude)     
# tp<-unique(raw$trip.id)  
#    
# for (b in 1:length(tp)) {
#     trp<-raw %>% 
#         dplyr::filter(trip.id ==tp[b] & travelNb!=0)
#     
#     intr<-interp.ind %>% 
#         dplyr::filter(trip.id==tp[b])
#     
#     xmmin<-min(c(st_bbox(raw)[1],st_bbox(intr)[1]))
#    xmmax<-max(c(st_bbox(raw)[3],st_bbox(intr)[3]))
#     ymmin<-min(c(st_bbox(raw)[2],st_bbox(intr)[2]))
#     ymmax<-max(c(st_bbox(raw)[4],st_bbox(intr)[4]))
#     
#    raw_lines <- trp %>% 
#        dplyr::group_by(trip.id) %>% # and year, month, etc as needed
#   dplyr::summarise(do_union = FALSE) %>%
#   sf::st_cast("MULTILINESTRING") 
#    
#      int_lines <-   intr %>% 
#          dplyr::group_by(trip.id) %>% # and year, month, etc as needed
#   dplyr::summarise(do_union = FALSE) %>%
#   sf::st_cast("MULTILINESTRING") 
#      
# jpeg(filename = here("outputs","clean_trips",paste("bassrock",tp[b],"pastecs.jpg",sep="_")),
#      res=200,units="cm",width=15,height=15)
#    ma<-ggplot(data = europe_crop) +
#  #   geom_sf(fill="grey") +
#     coord_sf(xlim = c(xmmin,xmmax), ylim = c(ymmin,ymmax), expand = FALSE) +
#      geom_sf(data = intr, shape = 16, colour = colo.ind[a],size=1.2) +
#      geom_sf(data = trp, shape = 17, colour = "black",size=1.5) +
#     geom_sf(data = colo_sf_bassrock, shape = 15, colour = "orange") +
#      geom_sf(data=int_lines,colour=colo.ind[a]) +
#   #   geom_sf(data=raw_lines,colour="black") +
#     labs(title =  tp[b])
#  print(ma)
#  dev.off()
# }
 }
# 
```

## 3- Summary of clean trips

At-sea trips retained are at least \>1h long, \>1km from the colony and have more than 4 locations. Migration bounds are excluded.

```{r}
#| echo: false
#| include: true
#| warning: false
#| message: false


load(here("Data","NewlyCreatedData","loc_clean_interp_bassrock.RData"))

trips_interp_bassrock<-trips_summary_ind(loc.interp.bassrock,colony=colo_coord_bassrock)

##plot trip and land periods
cleandist<-ggplot(trips_interp_bassrock,aes(x=DateEnd,y=Distmaxkm),group=id)+
    geom_point(aes(color=id),show.legend=F) +
 #   scale_y_continuous(limits=c(0,200)) +
    scale_color_manual(values=colo.ind)+
    labs(x="Date",y="Maximal distance to colony (km)")

cleandur<-ggplot(trips_interp_bassrock,aes(x=DateEnd,y=TripDurh ),group=id)+
    geom_point(aes(color=id)) +
#    scale_y_continuous(limits=c(0,10)) +
    scale_color_manual(values=colo.ind)+
    labs(x="Date",y="Trip duration (h")


correl<-ggplot(trips_interp_bassrock,aes(x=log(TripDurh),y=log(Distmaxkm)))+
    geom_point(aes(color=DateEnd)) +
    scale_colour_datetime(low=viridis(100)[1],high=viridis(100)[100]) +
    labs(x="log Trip duration (h)",y="log Maximal distance to colony (km)")

land<-ggplot(cleanlandsbass,aes(x=DateEnd,y=LandDurh ),group=id)+
    geom_point(aes(color=id)) +
  #  scale_y_continuous(limits=c(0,10)) +
    scale_color_manual(values=colo.ind)+
    labs(x="Date",y="Periods on land (h)")

grid.arrange(cleandist,cleandur,correl,land, nrow=2,ncol=2,
             top = textGrob("Clean trips",gp=gpar(fontsize=16,font=3)))

```
