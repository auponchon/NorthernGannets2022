---
title: "Northern gannets Bass Rock 2022"
author: "Aurore Ponchon"
format: docx
editor: visual
---

## 1- Importing data

GPS data are stored as individual excel files w. I calculated distances and time between locations and added a few variables to summarize time spent on land and at-sea. I illustrate the raw data locations by some descriptive plots.

```{r}
#| echo: false
#| include: true
#| warning: false
#| message: false
library(here)
library(forcats)
library(tidyverse)
library(ggplot2)
library(viridis)
library(gridExtra)
library(sf)
library(rgdal)
library(kableExtra)
library(conflicted)
library(adehabitatLT)

source(here("R","trip_functions.R"))

#import all files together
files<-list.files(here("data","raw","bass_rock"),
                  pattern=".pos",
                  full.names=T)
tags <- sub(".*Tag","",files)
tags <- data.frame(id=sub("_.*","",tags),
                   tag=as.character(1:length(files)))


bassrock_raw<-files %>% 
    map_dfr(read.table, header=F, sep="," , skip = 5, .id = "filepath" ) %>% 
    bind_rows() %>% 
    rename(tag=filepath,
        Day = V1,
           Month = V2,
           Year = V3,
           Hour = V4,
           Min = V5,
           Sec = V6,
           Sec_of_day = V7,
           Sats = V8,
           lat=V9,
           long=V10,
           alt = V11) %>% 
    left_join(tags, by ="tag") %>% 
    mutate(datetime=as.POSIXct(strptime(paste(paste(Year,Month,Day,sep="-"),
                          paste(Hour,Min,Sec,sep=":"),
                          sep=" "),format="%y-%m-%d %H:%M:%S"),"GMT"),
           id=as.factor(id),
           speed=0,
           site=as.factor("Bass Rock"),
            sero=NA) %>% 
    dplyr::filter(lat!=0 & alt!=0 & datetime > start & id!="18271") %>% 
    dplyr::select(id,datetime,long,lat,alt,speed,site,sero) %>% 
    arrange(id,datetime) %>% 
    distinct(id,datetime, .keep_all= TRUE) %>% 
    droplevels()

  save(bassrock_raw,file=here("data","raw","bass_rock","gannets_bassrock_raw_2022.Rdata"))
 
  
  SPDF <- SpatialPointsDataFrame(coords = bassrock_raw[,c("long","lat")], 
                                 data = bassrock_raw,
                               proj4string = CRS(projcrs))

 writeOGR(SPDF, dsn=here("data","NewlyCreatedData","shapefiles"), layer="all_raw_gannets_bassrock", driver="ESRI Shapefile", overwrite_layer =T)

 ids<-unique(levels(bassrock_raw$id))
colo.ind<-tim.colors(length(ids))


#create new object with distance and time differences
rawLoc.bassrock<-NULL

#loop through each individual 
for (i in 1:length(ids)){
    ind.loc<-bassrock_raw %>% 
        dplyr::filter(id==ids[i]) %>% 
        mutate(distmax=0,
               distadj=0,
               totalpath=0,
               difftimemin=0,
               travelNb=0,
               onlandNb=0)
  
  #  print(c("Processing individual ", i))
      
  #loop through each line to calculate distance and time difference with previous location
for (l in 2:nrow(ind.loc)){
    
ind.loc[l,"distadj"]<-rdist.earth(ind.loc[l,c("long","lat")],
                                   ind.loc[l-1,c("long","lat")], miles = F)
ind.loc[l,"difftimemin"]<-difftime(ind.loc[l,"datetime"],
                                   ind.loc[l-1,"datetime"], units="mins")
ind.loc[l,"distmax"]<-rdist.earth(ind.loc[l,c("long","lat")],
                                   colo_coord_bassrock[c(1,2)], miles = F)
}

#define periods on land and at sea   
ind.loc<-define_trips(data=ind.loc,dist.min=dist.threshold)
rawLoc.bassrock<-rbind(rawLoc.bassrock,ind.loc)    
}

rawLoc.bassrock$trip.id<-paste(rawLoc.bassrock$id,rawLoc.bassrock$travelNb,sep=".")
rawLoc.bassrock<-add_missing_return(rawLoc.bassrock,
                                    time.int=reso,
                                    colony=colo_coord_bassrock)

save(rawLoc.bassrock,file=here("data","NewlyCreatedData","rawLocBassrock.Rdata"))


load(here("data","NewlyCreatedData","rawLocBassrock.Rdata"))

#Plot locations
distloc<-ggplot(rawLoc.bassrock,aes(x=datetime,y=distmax),group=id)+
    geom_point(aes(color=id),show.legend=F) +
     geom_line(aes(color=id),show.legend=F,size=0.8) +
#    scale_y_continuous(limits=c(0,400)) +
    scale_color_manual(values=colo.ind)+
    labs(x="Date",y="Maximal distance to colony (km)")

diffloc<-ggplot(rawLoc.bassrock,aes(x=datetime,y=difftimemin/60),group=id)+
    geom_point(aes(color=id),show.legend=F) +
    scale_color_manual(values=colo.ind)+
    labs(x="Date",y="Time gaps (h)")

grid.arrange(distloc,diffloc,ncol=2)

#summarize all trips and periods on land by individuals
raw_trips_bassrock<-trips_summary_ind(rawLoc.bassrock)
raw_land_bassrock<-land_summary_ind(rawLoc.bassrock)

# write.csv(raw_trips_bassrock,file=here("data","NewlyCreatedData","raw_trips_summary_bassrock.csv"),
#           row.names = F,quote=F)
# write.csv(raw_land_bassrock,file=here("data","NewlyCreatedData","raw_land_summary_bassrock.csv"),
#           row.names = F,quote=F)

summy.trips<-raw_trips_bassrock %>% 
    group_by(id) %>% 
    summarize(Nbtrip=n(),
              Mindurh=min(TripDurh),
              maxDiffh=max(maxDiffTimeh),
              minLocs=min(nlocs))

# kbl(summy.trips,caption="Summary of raw trips") %>%
#   kable_styling(bootstrap_options = c("striped", "hover"))


summy.land<-raw_land_bassrock %>% 
    group_by(id) %>% 
    summarize(Nbland=n(),
              Mindurh=min(LandDurh),
              maxDiffh=max(maxDiffTimeh),
              minLocs=min(nlocs))

# kbl(summy.land,caption="Summary of periods on land") %>%
#   kable_styling(bootstrap_options = c("striped", "hover"))


##plot trip and land periods
dist<-ggplot(raw_trips_bassrock,aes(x=DateEnd,y=Distmaxkm),group=id)+
    geom_point(aes(color=id),show.legend=F) +
    scale_y_continuous(limits=c(0,500)) +
    scale_color_manual(values=colo.ind)+
    labs(x="Date",y="Maximal distance to colony (km)")

dur<-ggplot(raw_trips_bassrock,aes(x=DateEnd,y=TripDurh ),group=id)+
    geom_point(aes(color=id)) +
 #   scale_y_continuous(limits=c(0,10)) +
    scale_color_manual(values=colo.ind)+
    labs(x="Date",y="Trip duration (h)")
grid.arrange(dist,dur,ncol=2)

correl<-ggplot(raw_trips_bassrock,aes(x=log(TripDurh),y=log(Distmaxkm)))+
    geom_point(aes(color=DateEnd)) +
    scale_colour_datetime(low=viridis(100)[1],high=viridis(100)[100]) +
    labs(x="log Trip duration (h)",y="log Maximal distance to colony (km)")
print(correl)

land<-ggplot(raw_land_bassrock,aes(x=DateEnd,y=LandDurh ),group=id)+
    geom_point(aes(color=id)) +
  #  scale_y_continuous(limits=c(0,10)) +
    scale_color_manual(values=colo.ind)+
    labs(x="Date",y="Periods on land (h)")
print(land)

clean.trip.nb<-raw_trips_bassrock %>%
     dplyr::filter(TripDurh > dur.thres & nlocs >= row.thres) 

cleanLocs.bassrock<-rawLoc.bassrock %>%
    dplyr::filter(rawLoc.bassrock$trip.id %in% clean.trip.nb$trip.id)

save(cleanLocs.bassrock,file=here("data","NewlyCreatedData","clean_locs_bassrock.Rdata"))

remove(move.bassrock,ind.loc,locs.bassrock,serol.bassrock,dist,dur,diffloc,distloc,correl)

 SPDF <- SpatialPointsDataFrame(coords = cleanLocs.bassrock[,c("long","lat")], 
                                data = cleanLocs.bassrock,
                               proj4string = CRS(projcrs))
 writeOGR(SPDF, dsn=here("data","NewlyCreatedData","shapefiles"), layer="clean_trips_raw_gannets_bassrock", driver="ESRI Shapefile", overwrite_layer =T)

```

## 2- Interpolation

As data has irregular time intervals between consecutive locations, we linearly interpolated data to have one location every 15min. We then compared each raw trip with interpolations.

```{r}
#| echo: false
#| include: true
#| warning: false
#| message: false


load(here("data","NewlyCreatedData","rawLocBassrock.Rdata"))
library(rnaturalearth)

##Interpolation
# loc.clean.interp<-interpol_ltraj(data=cleanLocs.bassrock,
#                            time.int=reso,
#                            colony=colo_coord_bassrock)

loc.clean.interp.bassrock<-interpol_pastecs(data=cleanLocs.bassrock,
                           time.int=reso,
                           colony=colo_coord_bassrock)


migration<-c("18204.25","18224.30","18225.38","18227.54","18264.35","18268.39","18271.35")
incomplete<-c("18201.1","18224.1","18203.20")

loc.interp.bassrock<-loc.clean.interp.bassrock %>% 
    dplyr::filter(!trip.id %in% migration) %>% 
    dplyr::filter(!trip.id %in% incomplete)


save(loc.interp.bassrock,
     file=here("Data","NewlyCreatedData","loc_clean_interp_bassrock.RData"))

##Ilustrate interpolations with raw data

# longmn=-3
# longmx=0
# latmn=54.5
# latmx=57.5
# 
# #crop polygon shapefile to the study area
# world <- ne_countries(scale = 50, returnclass = 'sf')
# colo_sf_bassrock<-st_as_sf(colo_coord_bassrock,                         
#            coords = c("long", "lat"),
#            crs = projcrs)
# 
# europe <- c("Belgium","Denmark","France","United Kingdom",
#                    "Germany","Ireland","Netherlands",
#                    "Portugal","Spain","Sweden")
# europe_map <- 
#     world %>% 
#     dplyr::filter(name %in% europe)
# 
# bbox_europe <- st_bbox(c(xmin= longmn , ymin=latmn ,xmax=longmx, ymax = latmx), 
#                        crs = projcrs)
# europe_crop <- st_crop(europe_map, bbox_europe)
# 
# 
# for (a in 1:length(ids)){
#     raw<-cleanLocs.bassrock %>% 
#         dplyr::filter(id==ids[a] & lat > 47) %>% 
#         st_as_sf(.,                         
#            coords = c("long", "lat"),
#            crs = projcrs)
#    
#      interp.ind<-loc.interp.bassrock %>% 
#         dplyr::filter(id==ids[a]& lat > 47) %>% 
#      st_as_sf(.,                         
#            coords = c("long", "lat"),
#            crs = projcrs)
# 
# ##Ilustrate interpolations with raw data
# longmin=floor(st_bbox(interp.ind)[1])
# longmax=ceiling(st_bbox(interp.ind)[3])
# latmin=floor(st_bbox(interp.ind)[2])
# latmax=ceiling(st_bbox(interp.ind)[4]) 
#      
#      
# mapa<-ggplot(data = europe_crop) +
#     geom_sf(fill="grey") +
#     coord_sf(xlim = c(longmin,longmax), ylim = c(latmin, latmax), expand = FALSE) +
#      geom_sf(data = interp.ind, shape = 16, colour = colo.ind[a]) +
#      geom_sf(data = raw, shape = 17, colour = "black",size=0.8) +
#     geom_sf(data = colo_sf_bassrock, shape = 15, colour = "orange") +
#     labs(title = paste ("Raw vs interpolated locations ID", ids[a],sep=" "))
#  print(mapa)   
#     
#     
# tp<-unique(raw$trip.id)  
#    
# for (b in 1:length(tp)) {
#     trp<-raw %>% 
#         dplyr::filter(trip.id ==tp[b] & travelNb!=0)
#     
#     intr<-interp.ind %>% 
#         dplyr::filter(trip.id==tp[b])
#     
#     xmmin<-min(c(st_bbox(raw)[1],st_bbox(intr)[1]))
#    xmmax<-max(c(st_bbox(raw)[3],st_bbox(intr)[3]))
#     ymmin<-min(c(st_bbox(raw)[2],st_bbox(intr)[2]))
#     ymmax<-max(c(st_bbox(raw)[4],st_bbox(intr)[4]))
#     
#    raw_lines <- trp %>% 
#        dplyr::group_by(trip.id) %>% # and year, month, etc as needed
#   dplyr::summarise(do_union = FALSE) %>%
#   sf::st_cast("MULTILINESTRING") 
#    
#      int_lines <-   intr %>% 
#          dplyr::group_by(trip.id) %>% # and year, month, etc as needed
#   dplyr::summarise(do_union = FALSE) %>%
#   sf::st_cast("MULTILINESTRING") 
#      
# jpeg(filename = here("outputs","clean_trips",paste("bassrock",tp[b],"pastecs.jpg",sep="_")),
#      res=200,units="cm",width=15,height=15)
#    ma<-ggplot(data = europe_crop) +
#  #   geom_sf(fill="grey") +
#     coord_sf(xlim = c(xmmin,xmmax), ylim = c(ymmin,ymmax), expand = FALSE) +
#      geom_sf(data = intr, shape = 16, colour = colo.ind[a],size=1.2) +
#      geom_sf(data = trp, shape = 17, colour = "black",size=1.5) +
#     geom_sf(data = colo_sf_bassrock, shape = 15, colour = "orange") +
#      geom_sf(data=int_lines,colour=colo.ind[a]) +
#   #   geom_sf(data=raw_lines,colour="black") +
#     labs(title =  tp[b])
#  print(ma)
#  dev.off()
# }}
# 


```

## 3- Summary of clean trips

At-sea trips retained are at least \>1h long, \>1km from the colony and have more than 4 locations.

```{r}
#| echo: false
#| include: true
#| warning: false
#| message: false


load(here("Data","NewlyCreatedData","loc_clean_interp_bassrock.RData"))

trips_interp_bassrock<-trips_summary_ind(loc.interp.bassrock)

##plot trip and land periods
cleandist<-ggplot(trips_interp_bassrock,aes(x=DateEnd,y=Distmaxkm),group=id)+
    geom_point(aes(color=id),show.legend=F) +
 #   scale_y_continuous(limits=c(0,200)) +
    scale_color_manual(values=colo.ind)+
    labs(x="Date",y="Maximal distance to colony (km)")

cleandur<-ggplot(trips_interp_bassrock,aes(x=DateEnd,y=TripDurh ),group=id)+
    geom_point(aes(color=id)) +
#    scale_y_continuous(limits=c(0,10)) +
    scale_color_manual(values=colo.ind)+
    labs(x="Date",y="Trip duration (h")
grid.arrange(cleandist,cleandur,ncol=2)

correl<-ggplot(trips_interp_bassrock,aes(x=log(TripDurh),y=log(Distmaxkm)))+
    geom_point(aes(color=DateEnd)) +
    scale_colour_datetime(low=viridis(100)[1],high=viridis(100)[100]) +
    labs(x="log Trip duration (h)",y="log Maximal distance to colony (km)")
print(correl)

```

## 5- Effect of time on trip charateristics (GLMM)

According to GLMM, no effect of day on maximal distance, weak effect on trip duration and no effect on the total distance travelled during a trip.

```{r}
#| echo: false
#| include: true
#| warning: false
#| message: false


load(here("Data","NewlyCreatedData","loc_clean_interp_bassrock.RData"))

library(lme4)
library(lattice)
library(lmerTest)
library(sjPlot)

trips.interp.nomigr<-trips_interp_bassrock %>% 
  #  dplyr::filter(Distmaxkm < 300) %>% 
    mutate(day=match(format(DateEnd,format="%F"), 
                     unique(format(DateEnd,format="%F"))))

#Analysis with maximal distance
ggplot(trips.interp.nomigr,aes(x=day,y=Distmaxkm,
                               colour=id))+
    geom_point()+
    geom_smooth(method="lm",alpha=0.2) + 
    ggtitle("Maximal distance to colony over time by individual")

glmm.dist<-lmerTest::lmer(log(Distmaxkm) ~ day + (1 | id),data=trips.interp.nomigr)
     
summary(glmm.dist)
 lattice::dotplot(ranef(glmm.dist))$id
 plot_model(glmm.dist,type="eff",terms="day")

 
 #Analysis with trip duration
ggplot(trips.interp.nomigr,aes(x=day,y=TripDurh,
                               colour=id))+
    geom_point()+
    geom_smooth(method="lm",alpha=0.2)+
   ggtitle("Trip duration over time by individual")

glmm.dur<-lmerTest::lmer(log(TripDurh) ~ day + (1 | id),data=trips.interp.nomigr)
 
summary(glmm.dur)
lattice::dotplot(ranef(glmm.dur))$id
 plot_model(glmm.dur,type="eff",terms="day")
 
 
#Analysis with total path
ggplot(trips.interp.nomigr,aes(x=day,y=TotalPathkm,
                               colour=id))+
    geom_point()+
    geom_smooth(method="lm",alpha=0.2) +
    ggtitle("Total trip distance over time by individual")


glmm.path<-lmerTest::lmer(log(TotalPathkm) ~ day + (1 | id),data=trips.interp.nomigr)
   summary(glmm.path)  
lattice::dotplot(ranef(glmm.path))$id
plot_model(glmm.path,type="eff",terms="day")
```

## 6- Effect of time on colony attendance (GLMM)

According to GLMM, no effect of day on duration of periods on land at the colony.

```{r}
#| echo: false
#| include: true
#| warning: false
#| message: false

lands<-raw_land_bassrock %>% 
    dplyr::filter(LandDurh > 1) %>% 
    mutate(day=match(format(DateEnd,format="%F"), 
                     unique(format(DateEnd,format="%F"))))

#Analysis with maximal distance
ggplot(lands,aes(x=day,y=LandDurh,
                               colour=id))+
    geom_point()+
    geom_smooth(method="lm",alpha=0.2) + 
    ggtitle("Periods on land (h)")

glmm.durnest<-lmerTest::lmer(log(LandDurh) ~ day + (1 | id), data=lands)
summary(glmm.durnest,corr=F)    
plot_model(glmm.durnest,type="eff",terms="day")
lattice::dotplot(ranef(glmm.dur))$id
```
