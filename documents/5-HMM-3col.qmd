---
title: "HMM-3 colonies"
format: html
editor: visual
---

## 1. Fitting a HMM

Behavioural states are associated with each trip location:

-   state 1: resting on the water

-   state 2: foraging

-   state 3: travelling

```{r HMM}
#| echo: false
#| include: true
#| warning: false
#| message: false

library(moveHMM)
library(tidyverse)
library(here)

source(here("R","trip_functions.R"))

load(here("data","NewlyCreatedData","loc_clean_interp_bassrock.RData"))
load(here("data","NewlyCreatedData","loc_clean_interp_rouzic.RData"))
load(here("data","NewlyCreatedData","loc_clean_interp_grassholm.RData"))

dat<-loc.interp.bassrock %>% 
    rbind(loc.interp.rouzic, loc.interp.grassholm) %>% 
    dplyr::rename(ID=id) 
    # dplyr::mutate(ID=as.factor(ID)) %>% 
    # dplyr::select(ID,datetime,long,lat) 

proc.dat<-prepData(dat,type="LL",coordNames = c("long","lat"))

par(mfrow=c(1,2))
hist(proc.dat$step)
hist(proc.dat$angle)

#finding the right set of parameters for step length and turning angles  for 3 states
 set.seed(12345)
 nruns<-20
 mles<-vector("numeric",length=nruns)

 #test for von mise distribution for angle concentrations
# for (foo in 1:nruns){
#   print(foo)
#   mu0<-sort(c(runif(1,0.05,2),runif(1,0.5,5),runif(1,2,20)) ) # means for step length
#   sigma0<-c(runif(1,0,0.5),runif(1,0.1,5),runif(1,1,10))  #sd for step length
#   #zeromass0<-runif(3,0,0.01)
#   stepPar0<-c(mu0,sigma0)#,zeromass0)  #joint object for step length
#   angleMean0<-sample(c(0,pi),size=3,replace=T)   #mean for turning angle
#   kappa0<-runif(3,0,5)  # angle concentration
#   anglePar0<-c(angleMean0,kappa0)
# 
#   print(c(stepPar0,anglePar0))
# 
#   m0<-fitHMM(data=proc.dat,nbStates=3,stepPar0=stepPar0,anglePar0=anglePar0,
#              formula=~1,angleDist="vm")
#   mles[foo]<--m0$mod$minimum
# 
#   print( mles[foo])
# }
# 
# table(round(mles))

#lowest likelihood: -90453.6 with von mise with rouzic and bass rock separately

 mu0<-c(  1.6632406 ,1.9176271, 5.8344581)
 sigma0<-c( 0.3662481 ,2.5462810 ,7.5679477 )
 #zeromass0<-c(0.006009283 ,0.007147799,0.005138457)
 stepPar0<-c(mu0,sigma0)#,zeromass0)
 angleMean0<-c(0, 0.000000000 ,0)
 kappa0<-c(3.9578390, 1.2934216 ,4.9299192)
anglePar0<-c(angleMean0,kappa0) 
 

  mvm<-fitHMM(data=proc.dat,nbStates=3,stepPar0=stepPar0,anglePar0=anglePar0,
             formula=~1,angleDist="vm")
-mvm$mod$minimum

  plotPR(mvm)
  plot(mvm)
  
 dat$states<-viterbi(mvm)

 save(dat, file=here("data","NewlyCreatedData","all_loc_HMM_3col.RData"))
 
```

# 2. Calculating proportions of each state

```{r glmmTMB}
#| echo: false
#| include: true
#| warning: false
#| message: false

library(lme4)
library(glmmTMB)
library(wesanderson)
library(gridExtra)
library(kableExtra)
library(plotrix)
library(DHARMa)

load(here("data","NewlyCreatedData","all_loc_HMM_3col.RData"))

mycol<-wes_palette("FantasticFox1", n=3, type="discrete")

#load(here("data","NewlyCreatedData","all_loc_HMM_3col.RData"))
dat.prop<-dat %>% 
    as.data.frame(.) %>% 
    group_by(ID,site,trip.id,states) %>% 
    summarize(SumAct=sum(difftimemin),
              Count=n())

tot<-dat %>% 
    group_by(trip.id) %>% 
    summarize(Tot=sum(difftimemin),
               DateEnd= max(datetime))

dat.prop.tot<-dat.prop %>% 
   left_join(tot,by="trip.id") %>% 
    mutate(PropAct=SumAct/Tot,
           day=as.numeric(as.Date(DateEnd) - as.Date("2022-08-10"))) %>% 
    pivot_wider(id_cols=c("ID","site","trip.id","day"),
        names_from = states,id_expand=F,
                names_prefix = "Act",
                values_from = PropAct,
                names_sep=".",
                values_fill=0)


dat.id<-dat.prop.tot %>% 
    group_by(site,ID) %>% 
     summarize(across(c("Act1","Act2","Act3"), na.rm=T)) %>% 
    as.data.frame()

sum.act<- dat.id %>% 
    group_by(site) %>% 
    summarize(across(c("Act1","Act2","Act3"), 
                     list(mean=mean,
                          se=std.error))) %>% 
    mutate(across(where(is.numeric), ~ .* 100)) %>% 
    mutate(across(where(is.numeric), round,digits=1)) 
    

kbl(sum.act,caption="Summary of activities",
    colnames=c("RestingMean","restingSE","ForagingMean","ForagingSE",
               "FlyingMean","FlyingSE")) %>%
   kable_styling(bootstrap_options = c("striped", "hover"))


daysx<-c("10/08","20/08","30/08","09/09","19/09","29/09","09/10")

#Separate each activity by colony
rouzic<-dat.prop.tot %>% 
    dplyr::filter(site=="Rouzic") %>% 
    droplevels()
bassrock<-dat.prop.tot %>% 
    dplyr::filter(site=="Bass Rock") %>% 
    droplevels()
grassholm<-dat.prop.tot %>% 
    dplyr::filter(site=="Grassholm") %>% 
    droplevels()


```

## 2.1. Resting

```{r glmmTMB Resting}
#| echo: false
#| include: true
#| warning: false
#| message: false

#create new dataframes for model predictions
newdatrouz<-expand.grid(site=unique(rouzic$site),
                    day=seq(min(rouzic$day),
                            max(rouzic$day),1),
                    ID=NA)

newdatbass<-expand.grid(site=unique(bassrock$site),
                    day=seq(min(bassrock$day),
                            max(bassrock$day),1),
                    ID=NA)

newdatgrass<-expand.grid(site=unique(grassholm$site),
                    day=seq(min(grassholm$day),
                            max(grassholm$day),1),
                    ID=NA)


ggplot(dat.prop.tot,aes(x=day,y=Act1,colour=site))+
    geom_point()+
    geom_smooth(method="lm",alpha=0.2)

# Model for resting activities

rest.TMBglm.rouz<-glmmTMB(Act1 ~ day +  (1|ID), 
                          family = "binomial", ziformula = ~1,
                        data = rouzic)

qqnorm(resid(rest.TMBglm.rouz))
qqline(resid(rest.TMBglm.rouz))
summary(rest.TMBglm.rouz)
#rr<-simulateResiduals(rest.TMBglm.rouz,plot=T)
#
# rest.glmer.bass<-glmer(asin(Act1) ~ day + (1|ID), family = "binomial", 
#                         data = bassrock) 



rest.TMBglm.bass<-glmmTMB(Act1 ~ day + (1|ID), family = "binomial",
                        data = bassrock)
qqnorm(resid(rest.TMBglm.bass))
qqline(resid(rest.TMBglm.bass))
summary(rest.TMBglm.bass)
rest.TMBglm.grass<-glmmTMB(Act1 ~ day + (1|ID), family = "binomial",
                        data = grassholm)
qqnorm(resid(rest.TMBglm.grass))
qqline(resid(rest.TMBglm.grass))
summary(rest.TMBglm.grass)

newdatrouz$predrest<-predict(rest.TMBglm.rouz,se.fit=T, re.form=NA,
                                     newdata=newdatrouz,
                                    type="response")$fit
newdatrouz$predrestSE<-predict(rest.TMBglm.rouz,se.fit=T, re.form=NA,
                                     newdata=newdatrouz,
                                    type="response")$se.fit
newdatbass$predrest<-predict(rest.TMBglm.bass,newdata=newdatbass,se.fit=T,
                                    re.form=NA, type="response")$fit
newdatbass$predrestSE<-predict(rest.TMBglm.bass,newdata=newdatbass,se.fit=T,
                                    re.form=NA, type="response")$se.fit
newdatgrass$predrest<-predict(rest.TMBglm.grass,newdata=newdatgrass,se.fit=T,
                                    re.form=NA, type="response")$fit
newdatgrass$predrestSE<-predict(rest.TMBglm.grass,newdata=newdatgrass,se.fit=T,
                                    re.form=NA, type="response")$se.fit

```

## 2.2. Foraging

```{r glmmTMB Foraging}
#| echo: false
#| include: true
#| warning: false
#| message: false


#Model for foraging activities
ggplot(dat.prop.tot,aes(x=day,y=Act2,colour=site))+
    geom_point()+
    geom_smooth(method="lm",alpha=0.2)


forag.TMBglm.rouz<-glmmTMB(Act2 ~ day + (1 | ID), family = "binomial", 
                        data = rouzic) 

qqnorm(resid(forag.TMBglm.rouz))
qqline(resid(forag.TMBglm.rouz))
summary(forag.TMBglm.rouz)


forag.TMBglm.bass<-glmmTMB(Act2 ~ day + (1 | ID), family = "binomial", 
                        data = bassrock) 

qqnorm(resid(forag.TMBglm.bass))
qqline(resid(forag.TMBglm.bass))
summary(forag.TMBglm.bass)


forag.TMBglm.grass<-glmmTMB(Act2 ~ day + (1 | ID), family = "binomial", 
                        data = grassholm) 

qqnorm(resid(forag.TMBglm.grass))
qqline(resid(forag.TMBglm.grass))
summary(forag.TMBglm.grass)

newdatrouz$predfor<-predict(forag.TMBglm.rouz,newdata=newdatrouz,se.fit=T,
                                    re.form=NA,type="response")$fit
newdatrouz$predforSE<-predict(forag.TMBglm.rouz,newdata=newdatrouz,se.fit=T,
                                    re.form=NA,type="response")$se.fit
newdatbass$predfor<-predict(forag.TMBglm.bass,newdata=newdatbass,se.fit=T,
                                    re.form=NA,type="response")$fit
newdatbass$predforSE<-predict(forag.TMBglm.bass,newdata=newdatbass,se.fit=T,
                                    re.form=NA,type="response")$se.fit
newdatgrass$predfor<-predict(forag.TMBglm.grass,newdata=newdatgrass,se.fit=T,
                                    re.form=NA,type="response")$fit
newdatgrass$predforSE<-predict(forag.TMBglm.grass,newdata=newdatgrass,se.fit=T,
                                    re.form=NA,type="response")$se.fit


```

## 2.3. Flying

```{r glmmTMB Flying}
#| echo: false
#| include: true
#| warning: false
#| message: false
#| 
#Model for flying activities
ggplot(dat.prop.tot,aes(x=day,y=Act3,colour=site))+
    geom_point()+
    geom_smooth(method="lm",alpha=0.2)

fly.TMBglm.rouz<-glmmTMB(Act3 ~ day + (1 | ID), family = "binomial", 
                        data = rouzic) 

qqnorm(resid(fly.TMBglm.rouz))
qqline(resid(fly.TMBglm.rouz))
summary(fly.TMBglm.rouz)

fly.TMBglm.bass<-glmmTMB(Act3 ~ day + (1 | ID), family = "binomial", 
                        data = bassrock) 

qqnorm(resid(fly.TMBglm.bass))
qqline(resid(fly.TMBglm.bass))
summary(fly.TMBglm.bass)

fly.TMBglm.grass<-glmmTMB(Act3 ~ day + (1 | ID), family = "binomial", 
                        data = grassholm) 

qqnorm(resid(fly.TMBglm.grass))
qqline(resid(fly.TMBglm.grass))
summary(fly.TMBglm.grass)


newdatrouz$predfly<-predict(fly.TMBglm.rouz,newdata=newdatrouz,se.fit=T,
                                    re.form=NA,type="response")$fit
newdatrouz$predflySE<-predict(fly.TMBglm.rouz,newdata=newdatrouz,se.fit=T,
                                    re.form=NA,type="response")$se.fit
newdatbass$predfly<-predict(fly.TMBglm.bass,newdata=newdatbass,se.fit=T,
                                    re.form=NA,type="response")$fit
newdatbass$predflySE<-predict(fly.TMBglm.bass,newdata=newdatbass,se.fit=T,
                                    re.form=NA,type="response")$se.fit
newdatgrass$predfly<-predict(fly.TMBglm.grass,newdata=newdatgrass,se.fit=T,
                                    re.form=NA,type="response")$fit
newdatgrass$predflySE<-predict(fly.TMBglm.grass,newdata=newdatgrass,se.fit=T,
                                    re.form=NA,type="response")$se.fit


newdatall<-rbind(newdatbass,newdatgrass,newdatrouz)

```

## 2.4. Predictions over time for the 3 colonies

```{r glmmTMB plot}
#| echo: false
#| include: true
#| warning: false
#| message: false

restgg<-ggplot(dat.prop.tot, aes(x=day, y=Act1 ,colour=site)) + 
geom_point(alpha=0.6) +
 geom_line(data=newdatall,aes(x=day,y=predrest),lwd=1.5) +
geom_ribbon(data= newdatall,
            aes(ymin= predrest-predrestSE, 
                ymax= predrest+predrestSE, y= NULL,
                fill=site), alpha=0.4,colour = NA) +
     labs(y="Proportion of trip resting",tag="a)",x="") +
    scale_x_continuous(limits=c(0,65),
                       labels=daysx,
                       breaks=seq(0,65,10),
                       expand=c(0.001,0.05)) +
    scale_y_continuous(limits=c(0,1),
                       breaks=seq(0,1,0.2),
                       expand=c(0.01,0)) + 
    
  scale_colour_manual(values=mycol) +
    scale_fill_manual(values=mycol)  +
    theme_light()+
    theme(legend.position="none")


#
forgg<-ggplot(dat.prop.tot, aes(x=day, y=Act2 ,colour=site)) + 
geom_point(alpha=0.6) +
 geom_line(data=newdatall,aes(x=day,y=predfor),lwd=1.5) +
geom_ribbon(data= newdatall,
            aes(ymin= predfor-predforSE, 
                ymax= predfor+predforSE, y= NULL,
                fill=site),
            alpha=0.4,colour = NA) +
     labs(y="Proportion of trip foraging",tag="b)",x="") +
    scale_x_continuous(limits=c(0,65),
                       labels=daysx,
                       breaks=seq(0,65,10),
                       expand=c(0.001,0.05)) +
    scale_y_continuous(limits=c(0,1),
                       breaks=seq(0,1,0.2),
                       expand=c(0.01,0)) + 
    
  scale_colour_manual(values=mycol) +
    scale_fill_manual(values=mycol) +
    theme_light()+
    theme(legend.position="none")


flygg<-ggplot(dat.prop.tot, aes(x=day, y=Act3 ,colour=site)) + 
geom_point(alpha=0.6) +
 geom_line(data=newdatall,aes(x=day,y=predfly),lwd=1.5) +
geom_ribbon(data= newdatall,
            aes(ymin= predfly-predflySE, 
                ymax= predfly+predflySE, y= NULL,
                fill=site),
            alpha=0.4,colour = NA) +
     labs(y="Proportion of trip flying",tag="c)",x="") +
    scale_x_continuous(limits=c(0,65),
                       labels=daysx,
                       breaks=seq(0,65,10),
                       expand=c(0.001,0.05)) +
    scale_y_continuous(limits=c(0,1),
                       breaks=seq(0,1,0.2),
                       expand=c(0.01,0)) + 
    
  scale_colour_manual(values=mycol, name="Colony") +
    scale_fill_manual(values=mycol, name="Colony") +
    theme_light()

mylegend<-g_legend(flygg)

grid.arrange(arrangeGrob(restgg,forgg,
                         flygg+ theme(legend.position="none") ,
                                     ncol=3),
               mylegend, ncol=2,widths=c(1,0.1)) 




tiff(here("outputs","Figure_LMM_activities_3col.tif"),width=7000,height=2000,res=600,
     compression="lzw")
grid.arrange(arrangeGrob(restgg,forgg,
                         flygg+ theme(legend.position="none") ,
                                     ncol=3),
               mylegend, ncol=2,widths=c(1,0.1)) 

     dev.off()     
```
